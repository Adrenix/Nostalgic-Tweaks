plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfigs = [
                "mixin.nostalgic_tweaks.json",
                "mixin.nostalgic_tweaks-access.json",
                "mixin.nostalgic_tweaks-duck.json",
                "mixin.nostalgic_tweaks-forge.json",
                "mixin.nostalgic_tweaks-required.json",
                "mixin.nostalgic_tweaks-embeddium.json",
                "mixin.nostalgic_tweaks-flywheel.json"
        ]
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Mixin Extras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.0"))

    // Apple Skin Support
    modCompileOnly "maven.modrinth:appleskin:${rootProject.forge_appleskin_version}"

    // v0.6.x Flywheel Support
    modCompileOnly "com.jozufozu.flywheel:flywheel-forge-1.20.1:0.6.10-7"

    // v1.0.x Flywheel Support
    modCompileOnly "dev.engine-room.flywheel:flywheel-forge-api-1.20.1:1.0.1"

    // Embeddium Support
    modCompileOnly "maven.modrinth:embeddium:${rootProject.forge_embeddium_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "mod_author": rootProject.mod_author,
                "mod_id": rootProject.mod_id,
                "mod_name": rootProject.mod_name,
                "mod_source": rootProject.mod_source,
                "mod_issues": rootProject.mod_issues,
                "mod_license": rootProject.mod_license,
                "mod_credits": rootProject.mod_credits,
                "mod_curse": rootProject.mod_curse,
                "mod_modrinth": rootProject.mod_modrinth,
                "mod_donate": rootProject.mod_donate,
                "mod_discord": rootProject.mod_discord,
                "mod_description": rootProject.mod_description,
                "architectury_version": rootProject.architectury_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

jar {
    archivesBaseName = "${rootProject.archives_base_name}-mc${rootProject.minecraft_max_version}-Forge"
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
