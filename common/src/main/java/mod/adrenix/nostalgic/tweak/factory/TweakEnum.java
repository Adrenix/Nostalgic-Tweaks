package mod.adrenix.nostalgic.tweak.factory;

import mod.adrenix.nostalgic.network.packet.tweak.ClientboundTweakEnum;
import mod.adrenix.nostalgic.network.packet.tweak.ServerboundTweakEnum;
import mod.adrenix.nostalgic.network.packet.tweak.TweakPacket;
import mod.adrenix.nostalgic.tweak.TweakEnv;
import mod.adrenix.nostalgic.tweak.container.Container;
import mod.adrenix.nostalgic.tweak.enums.EnumTweak;
import mod.adrenix.nostalgic.util.common.lang.DecodeLang;
import mod.adrenix.nostalgic.util.common.lang.Lang;
import mod.adrenix.nostalgic.util.common.text.TextUtil;
import net.minecraft.network.chat.Component;
import org.jetbrains.annotations.Nullable;

import java.util.Locale;

public class TweakEnum<T extends Enum<T> & EnumTweak> extends TweakValue<T>
{
    /* Factories */

    /**
     * Build a new {@link TweakEnum} instance that is only available for the client. Reference the {@code see also} link
     * for more information about client tweaks.
     *
     * @param defaultEnum The tweak's default value.
     * @param container   The tweak's {@link Container}, either a {@code category} or {@code group}.
     * @param <E>         The enum class type of the default value.
     * @return A new {@link TweakEnum.Builder} instance.
     * @see TweakEnv#CLIENT
     */
    public static <E extends Enum<E> & EnumTweak> TweakEnum.Builder<E> client(E defaultEnum, Container container)
    {
        return new Builder<>(defaultEnum, TweakEnv.CLIENT, container);
    }

    /**
     * Build a new {@link TweakNumber} instance that is available for both the client and server. Reference the
     * {@code see also} link for more information about server tweaks.
     *
     * @param defaultEnum The tweak's default value.
     * @param container   The tweak's {@link Container}, either a {@code category} or {@code group}.
     * @param <E>         The enum class type of the default value.
     * @return A new {@link TweakEnum.Builder} instance.
     * @see TweakEnv#SERVER
     */
    public static <E extends Enum<E> & EnumTweak> TweakEnum.Builder<E> server(E defaultEnum, Container container)
    {
        return new Builder<>(defaultEnum, TweakEnv.SERVER, container);
    }

    /**
     * Build a new {@link TweakNumber} instance that is dynamic. Reference the {@code see also} link for more
     * information about dynamic tweaks.
     *
     * @param defaultEnum The tweak's default value.
     * @param container   The tweak's {@link Container}, either a {@code category} or {@code group}.
     * @param <E>         The enum class type of the default value.
     * @return A new {@link TweakEnum.Builder} instance.
     * @see TweakEnv#DYNAMIC
     */
    public static <E extends Enum<E> & EnumTweak> TweakEnum.Builder<E> dynamic(E defaultEnum, Container container)
    {
        return new Builder<>(defaultEnum, TweakEnv.DYNAMIC, container);
    }

    /* Constructor */

    TweakEnum(TweakEnum.Builder<T> builder)
    {
        super(builder);
    }

    /**
     * Overload method for {@link Tweak#setCacheValue(Object)} to handle enum values from an enum constants array. Type
     * information gets lost, so setting the cache throws an error. This method handles that situation.
     *
     * @param value An {@link Enum} value.
     */
    @SuppressWarnings("unchecked") // Enum values comes from an enum constants array generated by the tweak
    public void setCacheValue(Enum<?> value)
    {
        this.setCacheValue((T) value);
    }

    /**
     * Get the enumeration description key for this tweak based on the given enum value.
     *
     * @param value An enumeration value.
     * @return A lang file key.
     */
    private String getEnumKey(Enum<?> value)
    {
        return this.getLangKey() + ".enum." + value.name().toLowerCase(Locale.ROOT);
    }

    /**
     * Get the standard enumeration description key on the given enum value.
     *
     * @param value An enumeration value.
     * @return A lang file key.
     */
    private String getStandardKey(Enum<?> value)
    {
        String className = TextUtil.lowercaseFirstLetter(value.getClass().getSimpleName());

        return Lang.Enum.PARENT_KEY + className + "." + value.name().toLowerCase(Locale.ROOT) + ".info";
    }

    /**
     * Get a custom enum description provided by this tweak.
     *
     * @param value An enumeration value.
     * @return A custom description or {@code null} if the description does not exist.
     */
    @Nullable
    private String getCustomDescription(Enum<?> value)
    {
        String key = this.getEnumKey(value);
        String parsed = DecodeLang.findAndReplace(Component.translatable(key)).getString();

        if (parsed.equals(key))
            return null;

        return parsed;
    }

    /**
     * Get a standard description provided by the lang file.
     *
     * @param value An enumeration value.
     * @return A standard description or {@code null} if the description does not exist.
     */
    @Nullable
    private String getStandardDescription(Enum<?> value)
    {
        String key = this.getStandardKey(value);
        String parsed = DecodeLang.findAndReplace(Component.translatable(key)).getString();

        if (parsed.equals(key))
            return null;

        return parsed;
    }

    /**
     * Get an enum description that is specific to a tweak's implementation of the enum value. An example lang key for a
     * tweak enum description would be {@code gui.nostalgic_tweaks.config.mod.defaultScreen.enum.main_menu}. Where
     * {@code main_menu} is the enumeration name from some enum class. The enum value string is set to lowercase when
     * retrieving a translation value. Otherwise, an enum's standard description is used if it exists.
     *
     * @param value An enum value.
     * @return A {@link Component} enum description.
     */
    public Component getEnumDescription(Enum<?> value)
    {
        String description = this.getCustomDescription(value);

        if (description != null)
            return Component.literal(description);

        String standard = this.getStandardDescription(value);

        if (standard != null)
            return Component.literal(standard);

        return Component.empty();
    }

    /**
     * Check if the given enumeration value has a description.
     *
     * @param value An enumeration value.
     * @return Whether a description for the enumeration value exists.
     */
    public boolean isEnumDescribed(Enum<?> value)
    {
        return this.getCustomDescription(value) != null || this.getStandardDescription(value) != null;
    }

    @Override
    public @Nullable TweakPacket getClientboundPacket()
    {
        return new ClientboundTweakEnum(this);
    }

    @Override
    public @Nullable TweakPacket getServerboundPacket()
    {
        return new ServerboundTweakEnum(this);
    }

    /* Builder */

    public static class Builder<V extends Enum<V> & EnumTweak> extends TweakValue.Builder<V, Builder<V>>
    {
        /* Constructor */

        Builder(V defaultValue, TweakEnv env, Container container)
        {
            super(defaultValue, env, container);
        }

        /* Methods */

        @Override
        Builder<V> self()
        {
            return this;
        }

        /**
         * Finalize the building process.
         *
         * @return A new {@link TweakEnum} instance.
         */
        public TweakEnum<V> build()
        {
            return new TweakEnum<>(this);
        }
    }
}
