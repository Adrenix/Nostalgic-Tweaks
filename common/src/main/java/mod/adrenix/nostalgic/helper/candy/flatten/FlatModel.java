package mod.adrenix.nostalgic.helper.candy.flatten;

import com.mojang.blaze3d.vertex.PoseStack;
import mod.adrenix.nostalgic.tweak.config.CandyTweak;
import net.minecraft.client.renderer.block.model.BakedQuad;
import net.minecraft.client.renderer.block.model.ItemOverrides;
import net.minecraft.client.renderer.block.model.ItemTransforms;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.resources.model.BakedModel;
import net.minecraft.core.Direction;
import net.minecraft.util.RandomSource;
import net.minecraft.world.item.ItemDisplayContext;
import net.minecraft.world.level.block.state.BlockState;
import org.jetbrains.annotations.Nullable;

import java.util.List;

public class FlatModel implements BakedModel
{
    /* Fields */

    private final BakedModel model;
    private final PoseStack poseStack;
    private final ItemDisplayContext displayContext;

    /* Constructor */

    /**
     * Create a new wrapper model around the given model that will modify the quads generated by the original model.
     *
     * @param model     The {@link BakedModel} to wrap.
     * @param poseStack The current {@link PoseStack} instance.
     */
    public FlatModel(BakedModel model, PoseStack poseStack, ItemDisplayContext displayContext)
    {
        this.model = model;
        this.poseStack = poseStack;
        this.displayContext = displayContext;
    }

    /* Methods */

    @Override
    public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction direction, RandomSource random)
    {
        List<BakedQuad> quads = this.model.getQuads(state, direction, random);

        if (CandyTweak.OLD_2D_RENDERING.get() && this.displayContext != ItemDisplayContext.FIXED)
            quads = FlatItemHelper.getFrontQuad(quads);

        for (BakedQuad quad : quads)
        {
            if (quad == null)
                continue;

            FlatItemHelper.setUnitNormals(this.poseStack.last(), quad);
        }

        return quads;
    }

    @Override
    public boolean useAmbientOcclusion()
    {
        return this.model.useAmbientOcclusion();
    }

    @Override
    public boolean isGui3d()
    {
        return this.model.isGui3d();
    }

    @Override
    public boolean usesBlockLight()
    {
        return this.model.usesBlockLight();
    }

    @Override
    public boolean isCustomRenderer()
    {
        return this.model.isCustomRenderer();
    }

    @Override
    public TextureAtlasSprite getParticleIcon()
    {
        return this.model.getParticleIcon();
    }

    @Override
    public ItemTransforms getTransforms()
    {
        return this.model.getTransforms();
    }

    @Override
    public ItemOverrides getOverrides()
    {
        return this.model.getOverrides();
    }
}
