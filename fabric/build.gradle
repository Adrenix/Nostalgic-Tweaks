plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    
    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${rootProject.fabric_modmenu_version}"

    // Sodium Support
    modCompileOnly "maven.modrinth:sodium:${rootProject.fabric_sodium_version}"

    // Apple Skin Support
    modCompileOnly "maven.modrinth:appleskin:${rootProject.fabric_appleskin_version}"

    // Fuzzy Searching
    implementation "me.xdrop:fuzzywuzzy:${rootProject.fuzzy_search_version}"
    include "me.xdrop:fuzzywuzzy:${rootProject.fuzzy_search_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
            "mod_author": rootProject.mod_author,
            "mod_id": rootProject.mod_id,
            "mod_name": rootProject.mod_name,
            "mod_source": rootProject.mod_source,
            "mod_issues": rootProject.mod_issues,
            "mod_license": rootProject.mod_license,
            "mod_credits": rootProject.mod_credits,
            "mod_curse": rootProject.mod_curse,
            "mod_modrinth": rootProject.mod_modrinth,
            "mod_donate": rootProject.mod_donate,
            "mod_discord": rootProject.mod_discord,
            "mod_description": rootProject.mod_description,
            "fabric_api_version": rootProject.fabric_api_version,
            "architectury_version": rootProject.architectury_version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archivesBaseName = "${rootProject.archives_base_name}-${rootProject.minecraft_range}-Fabric"
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
